# -*- coding: utf-8 -*-
"""Copy of Sally Streamlit App

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1JHTGB2uwxbyeWoD1szLHaX4c4EyD0ECD
"""

!pip install streamlit

import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

st.set_page_config(page_title="Financial Risk Analyzer", layout="centered")
st.title("üìâ Financial Risk Analyzer")
st.markdown("Analyze earnings manipulation (Beneish M-Score) and bankruptcy risk (Altman Z‚Ä≤-Score).")

# Define sidebar navigation
tabs = [
    "Project Overview",
    "Dataset Description",
    "Data Dictionary",
    "Upload File",           #this is for shreya's upload file simulation
    "Beneish Model",
    "Implications - Detecting Fraud",
    "Next Step"
]
selected_tab = st.sidebar.radio("üìë Navigation", tabs)
import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

st.set_page_config(page_title="Financial Risk Analyzer", layout="centered")
st.title("üìâ Financial Risk Analyzer")
st.markdown("Analyze earnings manipulation (Beneish M-Score) and bankruptcy risk (Altman Z‚Ä≤-Score).")

# Define sidebar navigation
tabs = [
    "Project Overview",
    "Dataset Description",
    "Data Dictionary",
    "Upload File",           #this is for shreya's upload file simulation
    "Beneish Model",
    "Implications - Detecting Fraud",
    "Next Step"
]
selected_tab = st.sidebar.radio("üìë Navigation", tabs)

#Tab: Data Dictionary
if selected_tab == "Data Dictionary":
    st.header("üìö Data Dictionary")

    import pandas as pd

    # Fraud.csv Data Dictionary
    st.subheader("üïµÔ∏è Fraud.csv Columns")
    fraud_dict = {
        "Column Name": [
            "RESTATEMENT_NOTIFICATION_KEY",
            "RESTATEMENT_TYPE_FKEY",
            "RESTATEMENT_TYPE",
            "FILE_DATE",
            "COMPANY_FKEY",
            "BEST_EDGAR_TICKER",
            "is_fraud"
        ],
        "Description": [
            "Restatement Notification Key",
            "Restatement Type Key",
            "Restatement Type",
            "File Date",
            "Company Key",
            "Best Edgar Ticker",
            "If company committed fraud (1 = committed, 0 = not commit)"
        ]
    }
    st.dataframe(pd.DataFrame(fraud_dict))

    # Financialdata.csv & additional.csv Data Dictionary
    st.subheader("üíº Financialdata.csv & additional.csv Columns")
    financial_dict = {
        "Column Name": [
            "Ivao", "ivst", "gvkey", "datadate", "fyear", "indfmt", "consol", "popsrc", "datafmt", "tic",
            "conm", "curcd", "fyr", "act", "at", "cogs", "dltt", "dp", "intan", "ist", "It", "ni", "oancf",
            "ppegt", "rect", "revt", "urect", "xopr", "xsaga", "costat", "gsector", "gsubind", "idbflag", "sic"
        ],
        "Description": [
            "Investment and Advances - Other",
            "Short-Term Investments - Total",
            "Global Company Key",
            "Data Date",
            "Data Year - Fiscal",
            "Industry Format",
            "Consolidation Code",
            "Population Source",
            "Data Format",
            "Ticker",
            "Company Name",
            "ISO Currency Code",
            "Fiscal Year-end Month",
            "Current Assets - Total",
            "Current Assets - Total",
            "Cost of Goods Sold",
            "Long-Term Debt - Total",
            "",  # dp description missing
            "Intangible Assets - Total",
            "Investment Securities - Total",
            "",  # It description missing
            "",  # ni description missing
            "Operating Activities - Net Cash Flow",
            "Property, Plant, and Equipment - Total",
            "Receivables - Total",
            "Revenue - Total",
            "Receivables (Net)",
            "Operating Expenses - Total",
            "Selling, General, & Administrative Expense",
            "Active/ Inactive Status Market",
            "GIC Sector",
            "GIC Sub-Industries",
            "International, Domestic, Both Indicator",
            "Standard Industry Classification Code"
        ]
    }

    st.dataframe(pd.DataFrame(financial_dict))

elif selected_tab == "Upload File":
    st.header("üìÇ Upload Your Processed Dataset (CSV)")
    uploaded_file = st.file_uploader("Upload your file", type="csv")

    if uploaded_file:
        df = pd.read_csv(uploaded_file)

        # Validate required columns
        required_cols = {'is_fraud', 'z_score', 'bankruptcy_risk'}
        if not required_cols.issubset(df.columns):
            st.error(f"‚ùå Your dataset must contain the following columns: {', '.join(required_cols)}")
        else:
            st.success("‚úÖ File successfully loaded!")

            # Show data preview
            with st.expander("üîç View raw data"):
                st.dataframe(df.head())

            # Summary table
            st.subheader("üìä Fraud vs. Bankruptcy Risk Counts")
            summary = df.groupby(['is_fraud', 'bankruptcy_risk']).size().reset_index(name='count')
            st.dataframe(summary)

            # Visualization
            st.subheader("üìà Risk Distribution Chart")
            fig, ax = plt.subplots(figsize=(8, 5))
            sns.countplot(data=df, x='bankruptcy_risk', hue='is_fraud', palette='Set2', ax=ax)
            ax.set_title('Fraud Risk vs. Bankruptcy Risk')
            ax.set_xlabel("Bankruptcy Risk Category")
            ax.set_ylabel("Number of Companies")
            ax.legend(title="Fraudulent (Beneish M-Score)", labels=["No", "Yes"])
            st.pyplot(fig)

            # Z-score statistics
            st.subheader("üìê Altman Z‚Ä≤-Score Summary")
            stats = df.groupby('is_fraud')['z_score'].agg(['mean', 'median', 'std', 'count']).rename(
                index={0: 'Non-Fraud', 1: 'Fraud'}
            )
            st.dataframe(stats)
    else:
        st.info("üëÜ Upload a CSV to begin.")

else:
    st.header(f"üóÇÔ∏è {selected_tab}")
    st.write(f"This is the **{selected_tab}** page. Content coming soon.")
    import pandas as pd

    # Fraud.csv Data Dictionary
    st.subheader("üïµÔ∏è Fraud.csv Columns")
    fraud_dict = {
        "Column Name": [
            "RESTATEMENT_NOTIFICATION_KEY",
            "RESTATEMENT_TYPE_FKEY",
            "RESTATEMENT_TYPE",
            "FILE_DATE",
            "COMPANY_FKEY",
            "BEST_EDGAR_TICKER",
            "is_fraud"
        ],
        "Description": [
            "Restatement Notification Key",
            "Restatement Type Key",
            "Restatement Type",
            "File Date",
            "Company Key",
            "Best Edgar Ticker",
            "If company committed fraud (1 = committed, 0 = not commit)"
        ]
    }
    st.dataframe(pd.DataFrame(fraud_dict))

    # Financialdata.csv & additional.csv Data Dictionary
    st.subheader("üíº Financialdata.csv & additional.csv Columns")
    financial_dict = {
        "Column Name": [
            "Ivao", "ivst", "gvkey", "datadate", "fyear", "indfmt", "consol", "popsrc", "datafmt", "tic",
            "conm", "curcd", "fyr", "act", "at", "cogs", "dltt", "dp", "intan", "ist", "It", "ni", "oancf",
            "ppegt", "rect", "revt", "urect", "xopr", "xsaga", "costat", "gsector", "gsubind", "idbflag", "sic"
        ],
        "Description": [
            "Investment and Advances - Other",
            "Short-Term Investments - Total",
            "Global Company Key",
            "Data Date",
            "Data Year - Fiscal",
            "Industry Format",
            "Consolidation Code",
            "Population Source",
            "Data Format",
            "Ticker",
            "Company Name",
            "ISO Currency Code",
            "Fiscal Year-end Month",
            "Current Assets - Total",
            "Current Assets - Total",
            "Cost of Goods Sold",
            "Long-Term Debt - Total",
            "",  # dp description missing
            "Intangible Assets - Total",
            "Investment Securities - Total",
            "",  # It description missing
            "",  # ni description missing
            "Operating Activities - Net Cash Flow",
            "Property, Plant, and Equipment - Total",
            "Receivables - Total",
            "Revenue - Total",
            "Receivables (Net)",
            "Operating Expenses - Total",
            "Selling, General, & Administrative Expense",
            "Active/ Inactive Status Market",
            "GIC Sector",
            "GIC Sub-Industries",
            "International, Domestic, Both Indicator",
            "Standard Industry Classification Code"
        ]
    }

    st.dataframe(pd.DataFrame(financial_dict))

# Tab: Upload File
if selected_tab == "Upload File":
    st.header("üìÇ Upload Your Processed Dataset (CSV)")
    uploaded_file = st.file_uploader("Upload your file", type="csv")

    if uploaded_file:
        df = pd.read_csv(uploaded_file)

        # Validate required columns
        required_cols = {'is_fraud', 'z_score', 'bankruptcy_risk'}
        if not required_cols.issubset(df.columns):
            st.error(f"‚ùå Your dataset must contain the following columns: {', '.join(required_cols)}")
        else:
            st.success("‚úÖ File successfully loaded!")

            # Show data preview
            with st.expander("üîç View raw data"):
                st.dataframe(df.head())

            # Summary table
            st.subheader("üìä Fraud vs. Bankruptcy Risk Counts")
            summary = df.groupby(['is_fraud', 'bankruptcy_risk']).size().reset_index(name='count')
            st.dataframe(summary)

            # Visualization
            st.subheader("üìà Risk Distribution Chart")
            fig, ax = plt.subplots(figsize=(8, 5))
            sns.countplot(data=df, x='bankruptcy_risk', hue='is_fraud', palette='Set2', ax=ax)
            ax.set_title('Fraud Risk vs. Bankruptcy Risk')
            ax.set_xlabel("Bankruptcy Risk Category")
            ax.set_ylabel("Number of Companies")
            ax.legend(title="Fraudulent (Beneish M-Score)", labels=["No", "Yes"])
            st.pyplot(fig)

            # Z-score statistics
            st.subheader("üìê Altman Z‚Ä≤-Score Summary")
            stats = df.groupby('is_fraud')['z_score'].agg(['mean', 'median', 'std', 'count']).rename(
                index={0: 'Non-Fraud', 1: 'Fraud'}
            )
            st.dataframe(stats)
    else:
        st.info("üëÜ Upload a CSV to begin.")

# Placeholder content for other tabs
else:
    st.header(f"üóÇÔ∏è {selected_tab}")
    st.write(f"This is the **{selected_tab}** page. Content coming soon.")

